/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package ovap.video.filter.filtersetup.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import ovap.video.filter.filtersetup.util.FiltersetupAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FiltersetupItemProviderAdapterFactory extends FiltersetupAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FiltersetupItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.FilterInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterInstanceItemProvider filterInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.FilterInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterInstanceAdapter() {
		if (filterInstanceItemProvider == null) {
			filterInstanceItemProvider = new FilterInstanceItemProvider(this);
		}

		return filterInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.FilterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterTypeItemProvider filterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.FilterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterTypeAdapter() {
		if (filterTypeItemProvider == null) {
			filterTypeItemProvider = new FilterTypeItemProvider(this);
		}

		return filterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.FiltersSetup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FiltersSetupItemProvider filtersSetupItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.FiltersSetup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFiltersSetupAdapter() {
		if (filtersSetupItemProvider == null) {
			filtersSetupItemProvider = new FiltersSetupItemProvider(this);
		}

		return filtersSetupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.FilterConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterConnectionItemProvider filterConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.FilterConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterConnectionAdapter() {
		if (filterConnectionItemProvider == null) {
			filterConnectionItemProvider = new FilterConnectionItemProvider(this);
		}

		return filterConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.PortIn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortInItemProvider portInItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.PortIn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortInAdapter() {
		if (portInItemProvider == null) {
			portInItemProvider = new PortInItemProvider(this);
		}

		return portInItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.PortOut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortOutItemProvider portOutItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.PortOut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortOutAdapter() {
		if (portOutItemProvider == null) {
			portOutItemProvider = new PortOutItemProvider(this);
		}

		return portOutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.PortInInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortInInstanceItemProvider portInInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.PortInInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortInInstanceAdapter() {
		if (portInInstanceItemProvider == null) {
			portInInstanceItemProvider = new PortInInstanceItemProvider(this);
		}

		return portInInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.PortOutInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortOutInstanceItemProvider portOutInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.PortOutInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortOutInstanceAdapter() {
		if (portOutInstanceItemProvider == null) {
			portOutInstanceItemProvider = new PortOutInstanceItemProvider(this);
		}

		return portOutInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.Identifiable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifiableItemProvider identifiableItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.Identifiable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifiableAdapter() {
		if (identifiableItemProvider == null) {
			identifiableItemProvider = new IdentifiableItemProvider(this);
		}

		return identifiableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationMapEntryItemProvider configurationMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationMapEntryAdapter() {
		if (configurationMapEntryItemProvider == null) {
			configurationMapEntryItemProvider = new ConfigurationMapEntryItemProvider(this);
		}

		return configurationMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ovap.video.filter.filtersetup.FilterModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterModelItemProvider filterModelItemProvider;

	/**
	 * This creates an adapter for a {@link ovap.video.filter.filtersetup.FilterModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterModelAdapter() {
		if (filterModelItemProvider == null) {
			filterModelItemProvider = new FilterModelItemProvider(this);
		}

		return filterModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (filterInstanceItemProvider != null) filterInstanceItemProvider.dispose();
		if (filterTypeItemProvider != null) filterTypeItemProvider.dispose();
		if (filtersSetupItemProvider != null) filtersSetupItemProvider.dispose();
		if (filterConnectionItemProvider != null) filterConnectionItemProvider.dispose();
		if (portInItemProvider != null) portInItemProvider.dispose();
		if (portOutItemProvider != null) portOutItemProvider.dispose();
		if (portInInstanceItemProvider != null) portInInstanceItemProvider.dispose();
		if (portOutInstanceItemProvider != null) portOutInstanceItemProvider.dispose();
		if (identifiableItemProvider != null) identifiableItemProvider.dispose();
		if (configurationMapEntryItemProvider != null) configurationMapEntryItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (filterModelItemProvider != null) filterModelItemProvider.dispose();
	}

}
